HTTP (Hyper Text Transfer Protocol)
= a protocol for transferring data which is understood by browser and server

HTTPS (Hyper Text Transfer Protocol Secure)
= HTTP + data encryption (during transmission)

# Core Modules (http, https, fs, path, os)
http - launch a server, send requests
https - launch a ssl server


# Node.js Program Lifecyle
1. execute node app.js -> start script
2. parse code, register vars and funcs
3. the Node Application - event loop (keeps running as long as there are event listners registered)
4. process.exit


# Single Thread, Event Loop & Blocking Code
Node.js only uses one JavaScript thread to handle multiple threads
the event loop automatically starts when Node.js starts
- responsible for callbacks that contains fast-finishing code

The Event Loop
1. Timers - executes setTimeout, setInterval callbacks
2. Pending Callbacks - execute IO-related callbacks that were deferred
3. Poll - retrieve new IO events, execute their callbacks
4. Check - execute setImmediate() callbacks
5. Close Callbacks - execute all 'close' event callbacks
6. process.exit only if refs == 0

the "fs" sends to worker pool
- do the heavy lifting and runs on different threads
- triggers callback and ends up being in the event loop

# Section 2 Module Summary
How the Web Works
- client, request, server, response, client (a loop)
Program Lifecycle & Event Loop
- Node.js runs non-blocking JS code and uses an event-driven code for running your logic
- a Node program exits as soon as there is no more work to do
- Note: the createServer() never finishes by default
Asynchronous Code
- JS code is non-blocking 
- use callbacks and events (order changes!)
Requests & Responses
- parse request data in chunks (streams & buffers)
- avoid "double responses"
Node.js & Core Modules
- Node.js ships with multiple core modules (http, fs, path, ...)
- core modules can be imported into any file to be used there
- import via require("module")
The Node Module System
- import via require('./path-to-file') for custom files or require('module') for core & third party modules
- export via module.exports or just exports (for multiple exports)